datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model PendingUser {
  id                            String   @id @default(auto()) @map("_id") @db.ObjectId
  //
  email                         String   @unique
  official_name                 String
  official_surname              String
  display_name                  String
  display_surname               String
  password                      String
  date_of_birth                 String
  time_created                  DateTime @default(now())
  role                          Int      @default(0)
  email_verification_token      String
  email_verification_identifier String
}

model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  //
  created_at       DateTime         @default(now())
  password         String           @map("pw")
  role             Int
  //
  email            String           @unique
  phone_number     String?
  //
  official_name    String
  official_surname String
  display_name     String?
  display_surname  String?
  //
  nationality      String?
  date_of_birth    DateTime         @map("dob")
  pronouns         String?
  //
  TeamMember       Member[]
  Delegate         Delegate[]
  SchoolMember     SchoolMember[]
  SchoolDirector   SchoolDirector[]
  CommitteeChair   Chair[]
  TeamManager      Manager[]
  ProfilePicture   ProfilePicture[]
}

model ProfilePicture {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  //
  user    User   @relation(fields: [userId], references: [id])
  userId  String @map("uid")
  picture String
}

model ConferenceSession {
  id                        String                 @id @default(auto()) @map("_id") @db.ObjectId
  //
  isCurrent                 Boolean                @default(true)
  conference_session_number Int
  year                      Int
  theme                     String
  //
  Committee                 Committee[]
  Delegate                  Delegate[]
  Chair                     Chair[]
  TeamMember                Member[]
  TeamManager               Manager[]
  SchoolDirector            SchoolDirector[]
  SessionWorkshopDay        SessionWorkshopDay[]
  ConferenceDay             SessionConferenceDay[]
  Announcements             Announcements[]
  AnnouncementFor           AnnouncementFor[]
}

model SessionConferenceDay {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  //
  name        String
  date        DateTime
  description String
  location    String
  //
  session     ConferenceSession @relation(fields: [sessionId], references: [id])
  sessionId   String
}

model SessionWorkshopDay {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  //
  name        String
  date        DateTime
  description String
  location    String
  //
  session     ConferenceSession @relation(fields: [sessionId], references: [id])
  sessionId   String
}

model School {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  //
  name            String            @unique
  slug            String?           @unique
  join_year       Int?
  //
  Location        Location          @relation(fields: [locationId], references: [id])
  locationId      String            @db.ObjectId
  //
  SchoolMember    SchoolMember[]
  SchoolDirector  SchoolDirector[]
  AnnouncementFor AnnouncementFor[]
}

model SchoolMember {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  //
  user      User   @relation(fields: [user_id], references: [id])
  user_id   String
  school    School @relation(fields: [school_id], references: [id])
  school_id String
}

model SchoolDirector {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  //
  user       User              @relation(fields: [user_id], references: [id])
  user_id    String
  school     School            @relation(fields: [school_id], references: [id])
  school_id  String
  session    ConferenceSession @relation(fields: [session_id], references: [id])
  session_id String
}

model Committee {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  //
  name            String            @unique
  slug            String            @unique
  //
  session         ConferenceSession @relation(fields: [session_id], references: [id])
  session_id      String
  delegate        Delegate[]
  chair           Chair[]
  AnnouncementFor AnnouncementFor[]
}

model Delegate {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  //
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  committee   Committee         @relation(fields: [committeeId], references: [id])
  committeeId String
  session     ConferenceSession @relation(fields: [sessionId], references: [id])
  sessionId   String
}

model Chair {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  //
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  committee   Committee         @relation(fields: [committeeId], references: [id])
  committeeId String
  session     ConferenceSession @relation(fields: [sessionId], references: [id])
  sessionId   String
}

model Team {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  //
  name            String            @unique
  slug            String            @unique
  join_year       Int
  team_member     Member[]
  TeamManager     Manager[]
  AnnouncementFor AnnouncementFor[]
}

model Member {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  //
  role      String?
  user      User              @relation(fields: [userId], references: [id])
  userId    String
  team      Team              @relation(fields: [teamId], references: [id])
  teamId    String
  session   ConferenceSession @relation(fields: [sessionId], references: [id])
  sessionId String
}

model Manager {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  //
  user      User              @relation(fields: [userId], references: [id])
  userId    String
  team      Team              @relation(fields: [teamId], references: [id])
  teamId    String
  session   ConferenceSession @relation(fields: [sessionId], references: [id])
  sessionId String
}

model Location {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  //
  name        String
  slug        String?
  description String?
  //
  street      String?
  city        String?
  state       String?
  zip_code    String?
  country     String?
  //
  phone       String?
  email       String?
  website     String?
  //
  map_url     String?
  School      School[]
}

model Terms {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  text String
}

model Announcements {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  date                DateTime           @default(now())
  //
  title               String
  description         String?
  content             String
  ConferenceSession   ConferenceSession? @relation(fields: [conferenceSessionId], references: [id])
  conferenceSessionId String?            @db.ObjectId
  AnnouncementFor     AnnouncementFor[]
}

model AnnouncementFor {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  //
  announcement         Announcements      @relation(fields: [announcementId], references: [id])
  announcementId       String             @db.ObjectId
  session              ConferenceSession? @relation(fields: [sessionId], references: [id])
  sessionId            String?            @db.ObjectId
  //
  isPinned             Boolean            @default(false)
  isEdited             Boolean            @default(false)
  //
  school               School?            @relation(fields: [schoolId], references: [id])
  schoolId             String?            @db.ObjectId
  committee            Committee?         @relation(fields: [committeeId], references: [id])
  committeeId          String?            @db.ObjectId
  team                 Team?              @relation(fields: [teamId], references: [id])
  teamId               String?            @db.ObjectId
  //
  isForDeleagtes       Boolean            @default(false)
  isForChairs          Boolean            @default(false)
  isForMembers         Boolean            @default(false)
  isForManagers        Boolean            @default(false)
  isForSchoolDirectors Boolean            @default(false)
  isForSchoolMembers   Boolean            @default(false)
  isForAlumni          Boolean            @default(false)
  isForUsers           Boolean            @default(false)
  isForGuests          Boolean            @default(false)
  isForAdmins          Boolean            @default(false)
  isForGlobalAdmins    Boolean            @default(false)
  isForEveryone        Boolean            @default(false)
  isForEnrolled        Boolean            @default(false)
}

enum AlumniRole {
  Delegate
  Chair
  TeamManager
}
