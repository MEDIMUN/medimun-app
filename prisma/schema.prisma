datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model PendingUser {
  id                    Int       @id @default(autoincrement())
  email                 String    @unique
  password              String
  officialName          String
  officialSurname       String
  nationality           String?
  dateOfBirth           DateTime?
  timeCreated           DateTime  @default(now())
  emailVerificationCode String
}

model passwordReset {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  timeCreated       DateTime @default(now())
  passwordResetCode String
}

model Account {
  id          String   @id @default(uuid())
  password    String
  timeCreated DateTime @default(now())
  lastLogin   DateTime
  user        User[]
}

model User {
  id                                  String                                @id @unique
  email                               String                                @unique
  phoneNumber                         String?
  profilePicture                      String?
  //
  bestTimeToReach                     String?
  //
  isDisabled                          Boolean                               @default(false)
  //
  officialName                        String
  officialSurname                     String
  displayName                         String?
  username                            String?                               @unique
  //
  nationality                         String?
  dateOfBirth                         DateTime?                             @map("dob")
  gender                              String?
  //
  bio                                 String?
  pronouns                            String?
  //
  Student                             School?                               @relation(fields: [schoolId], references: [id])
  schoolId                            String?
  //
  isProfilePrivate                    Boolean                               @default(true)
  //ACCOUNT
  account                             Account?                              @relation(fields: [accountId], references: [id])
  accountId                           String?                               @unique
  //
  member                              Member[]
  delegate                            Delegate[]
  schoolDirector                      SchoolDirector[]
  chair                               Chair[]
  manager                             Manager[]
  globalAdmin                         GlobalAdmin[]
  seniorDirecor                       SeniorDirector[]
  secretaryGeneral                    SecretaryGeneral[]
  presidentOfTheGeneralAssembly       PresidentOfTheGeneralAssembly[]
  deputySecretaryGeneral              DeputySecretaryGeneral[]
  admin                               Admin[]
  message                             Message[]
  reaction                            Reaction[]
  chatMemeber                         ChatMemeber[]
  groupChatMemeber                    GroupChatMemeber[]
  deputyPresidentOfTheGeneralAssembly DeputyPresidentOfTheGeneralAssembly[]
  Director                            Director[]
  Announcement                        Announcement[]
  CommitteeRollCall                   CommitteeRollCall[]
  Role                                Role[]
  Resource                            Resource[]
  ApplicationSchoolDirector           ApplicationSchoolDirector[]
}

model Session {
  id                                                              String                                @id @unique @default(nanoid())
  isCurrent                                                       Boolean                               @default(false)
  isPreviousCurrent                                               Boolean                               @default(false)
  //
  isPartlyVisible                                                 Boolean                               @default(false)
  isVisible                                                       Boolean                               @default(false)
  //
  directorPrice                                                   Int                                   @default(0)
  delegatePrice                                                   Int                                   @default(0)
  isPriceLocked                                                   Boolean                               @default(false)
  //
  isSchoolDirectorApplicationsForceOpen                           Boolean                               @default(false)
  isSchoolDirectorApplicationsAutoOpen                            Boolean                               @default(false)
  schoolDirectorApplicationsAutoOpenTime                          DateTime?
  schoolDirectorApplicationsAutoCloseTime                         DateTime?
  //
  isSecretariatApplicationsForceOpen                              Boolean                               @default(false)
  isSecretariatApplicationsAutoOpen                               Boolean                               @default(false)
  secretariatApplicationsAutoOpenTime                             DateTime?
  secretariatApplicationsAutoCloseTime                            DateTime?
  //
  isChairAplicationsForceOpen                                     Boolean                               @default(false)
  isChairApplicationsAutoOpen                                     Boolean                               @default(false)
  chairApplicationsAutoOpenTime                                   DateTime?
  chairApplicationsAutoCloseTime                                  DateTime?
  //
  isDelegateApplicationsForceOpen                                 Boolean                               @default(false)
  isDelegateApplicationsAutoOpen                                  Boolean                               @default(false)
  delegateApplicationsAutoOpenTime                                DateTime?
  delegateApplicationsAutoCloseTime                               DateTime?
  //
  isMemberApplicationsForceOpen                                   Boolean                               @default(false)
  isMemberApplicationsAutoOpen                                    Boolean                               @default(false)
  memberApplicationsAutoOpenTime                                  DateTime?
  memberApplicationsAutoCloseTime                                 DateTime?
  //
  isManagerApplicationsForceOpen                                  Boolean                               @default(false)
  isManagerApplicationsAutoOpen                                   Boolean                               @default(false)
  managerApplicationsAutoOpenTime                                 DateTime?
  managerApplicationsAutoCloseTime                                DateTime?
  //
  number                                                          String                                @unique
  numberInteger                                                   Int                                   @unique
  //
  theme                                                           String?
  subTheme                                                        String?
  //
  description                                                     String?
  welcomeText                                                     String?
  about                                                           String?
  //
  cover                                                           String?
  //
  committee                                                       Committee[]
  department                                                      Department[]
  //
  schoolDirector                                                  SchoolDirector[]
  Day                                                             Day[]
  //
  secretaryGeneral                                                SecretaryGeneral[]
  presidentOfTheGeneralAssembly                                   PresidentOfTheGeneralAssembly[]
  deputySecretaryGeneral                                          DeputySecretaryGeneral[]
  deputyPresidentOfTheGeneralAssembly                             DeputyPresidentOfTheGeneralAssembly[]
  //
  chat                                                            Chat[]
  groupChat                                                       GroupChat[]
  Announcement                                                    Announcement[]
  Role                                                            Role[]
  Resource                                                        Resource[]
  //
  data                                                            String?
  //
  securityCouncilCountriesOfYear                                  String[]                              @default(["CN", "FR", "RU", "GB", "US"])
  countriesOfSession                                              String[]                              @default(["CN", "FR", "RU", "GB", "US"])
  maxNumberOfGeneralAssemblyDelegationsPerSchool                  Int?
  maxNumberOfSecurityCouncilAndSpecialCommitteeDelegatesPerSchool Int?
  minimumDelegateAgeOnFirstConferenceDay                          Int?
  ApplicationSchoolDirector                                       ApplicationSchoolDirector[]
}

model Day {
  id              String            @id @default(nanoid())
  type            DayType
  name            String?
  description     String?
  date            DateTime?         @unique
  location        Location?         @relation(fields: [locationId], references: [id])
  locationId      String?
  session         Session           @relation(fields: [sessionId], references: [id])
  sessionId       String
  DraftResolution DraftResolution[]
  RollCall        RollCall[]
}

model GlobalAdmin {
  id   String @id @unique
  user User   @relation(fields: [id], references: [id])
}

model Admin {
  id   String @id @unique
  user User   @relation(fields: [id], references: [id])
}

model SeniorDirector {
  id   String @id @unique
  user User   @relation(fields: [id], references: [id])
}

model Director {
  id   String @id @unique
  user User   @relation(fields: [id], references: [id])
}

model SecretaryGeneral {
  id        String  @id @default(uuid())
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  @@unique([userId, sessionId])
}

model DeputySecretaryGeneral {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  @@unique([userId, sessionId])
}

model PresidentOfTheGeneralAssembly {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  @@unique([userId, sessionId])
}

model DeputyPresidentOfTheGeneralAssembly {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  @@unique([userId, sessionId])
}

model Chair {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  committee   Committee @relation(fields: [committeeId], references: [id], onDelete: Cascade)
  committeeId String

  @@unique([userId, committeeId])
}

model Manager {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String

  @@unique([userId, departmentId])
}

model Delegate {
  id              String            @id @default(uuid())
  country         String?
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  committee       Committee         @relation(fields: [committeeId], references: [id], onDelete: Cascade)
  committeeId     String
  DraftResolution DraftResolution[]

  @@unique([userId, committeeId])
}

model Member {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String

  @@unique([userId, departmentId])
}

model SchoolDirector {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  school    School  @relation(fields: [schoolId], references: [id])
  schoolId  String
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  @@unique([userId, schoolId, sessionId])
}

model Role {
  id           String      @id @default(nanoid())
  type         RoleType
  //
  User         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  //
  //
  School       School?     @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId     String?
  //
  Session      Session?    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId    String?
  //
  Committee    Committee?  @relation(fields: [committeeId], references: [id], onDelete: Cascade)
  committeeId  String?
  //
  Department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String?
  //
  country      String?

  @@unique([userId, sessionId, type])
  @@unique([userId, schoolId, sessionId])
  @@unique([userId, country, committeeId])
  @@unique([userId, type, departmentId])
  @@unique([userId, type, committeeId])
  @@unique([userId, committeeId])
  @@unique([userId, departmentId])
}

enum RoleType {
  globalAdmin
  admin
  //
  seniorDirector
  director
  //
  secretaryGeneral
  deputySecretaryGeneral
  //
  presidentOfTheGeneralAssembly
  deputyPresidentOfTheGeneralAssembly
  //
  chair
  delegate
  member
  manager
  schoolDirector
}

model Committee {
  id                String              @id @unique @default(uuid())
  name              String
  description       String?
  shortName         String?
  slug              String?
  isVisible         Boolean             @default(false)
  //
  type              CommitteeType       @default(GENERALASSEMBLY)
  //
  session           Session             @relation(fields: [sessionId], references: [id])
  sessionId         String
  //
  delegate          Delegate[]
  chair             Chair[]
  channel           Channel[]
  Announcement      Announcement[]
  CommitteeRollCall CommitteeRollCall[]
  Role              Role[]
  Resource          Resource[]
  ExtraCountry      ExtraCountry[]

  @@unique([sessionId, name])
  @@unique([sessionId, shortName])
  @@unique([sessionId, slug])
}

model ExtraCountry {
  id            String    @id @default(nanoid())
  code          String
  //
  name          String
  //
  isPowerToVeto Boolean   @default(false)
  //
  committee     Committee @relation(fields: [committeeId], references: [id], onDelete: Cascade)
  committeeId   String

  @@unique([committeeId, code])
}

model Department {
  id           String           @id @default(uuid())
  name         String
  shortName    String?
  slug         String?
  isVisible    Boolean          @default(false)
  //
  type         DepartmentType[]
  //
  session      Session          @relation(fields: [sessionId], references: [id])
  sessionId    String
  //
  member       Member[]
  manager      Manager[]
  channel      Channel[]
  Role         Role[]
  Resource     Resource[]
  Announcement Announcement[]
}

model Location {
  id       String   @id @default(nanoid())
  name     String
  slug     String?
  isPublic Boolean  @default(false)
  //
  street   String?
  city     String?
  state    String?
  zipCode  String?
  country  String?
  //
  cover    String?
  //
  phone    String?
  email    String?
  website  String?
  school   School[]
  Day      Day[]
}

model School {
  id                        String                      @id @default(nanoid())
  name                      String                      @unique
  slug                      String?                     @unique
  joinYear                  Int?
  isPublic                  Boolean                     @default(false)
  //
  cover                     String?
  //
  phone                     String?
  email                     String?
  website                   String?
  location                  Location?                   @relation(fields: [locationId], references: [id])
  locationId                String?
  director                  SchoolDirector[]
  User                      User[]
  Role                      Role[]
  ApplicationSchoolDirector ApplicationSchoolDirector[]
}

// CHAT GROUPS ///////////////////////////////////////////////////////////

model Chat {
  id        String        @id @default(uuid())
  name      String?
  message   Message[]
  member    ChatMemeber[]
  Session   Session?      @relation(fields: [sessionId], references: [id])
  sessionId String?
}

model ChatMemeber {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String
}

model GroupChat {
  id        String             @id @default(uuid())
  session   Session            @relation(fields: [sessionId], references: [id])
  sessionId String
  message   Message[]
  member    GroupChatMemeber[]
}

model GroupChatMemeber {
  id     Int       @id @default(autoincrement())
  user   User      @relation(fields: [userId], references: [id])
  userId String
  chat   GroupChat @relation(fields: [chatId], references: [id])
  chatId String
}

model Channel {
  id           String      @id @default(uuid())
  name         String
  description  String
  committee    Committee?  @relation(fields: [committeeId], references: [id])
  committeeId  String?
  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?
  message      Message[]
}

// ROLL CALLS ///////////////////////////////////////////////////////////

model RollCall {
  id                String              @id @default(nanoid())
  name              String?
  index             Int                 @default(0)
  day               Day                 @relation(fields: [dayId], references: [id])
  dayId             String
  CommitteeRollCall CommitteeRollCall[]
}

model CommitteeRollCall {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  committee   Committee? @relation(fields: [committeeId], references: [id])
  committeeId String?
  rollCall    RollCall?  @relation(fields: [rollCallId], references: [id])
  rollCallId  String?
}

// MESSAGE ///////////////////////////////////////////////////////////

model Message {
  id          String     @id @default(uuid())
  //
  content     String
  time        DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  //
  chat        Chat?      @relation(fields: [chatId], references: [id])
  chatId      String?
  groupChat   GroupChat? @relation(fields: [groupChatId], references: [id])
  groupChatId String?
  replyTo     Message?   @relation("reply", fields: [replyToId], references: [id])
  replyToId   String?
  replies     Message[]  @relation("reply")
  //
  reaction    Reaction[]
  channel     Channel?   @relation(fields: [channelId], references: [id])
  channelId   String?
}

model Reaction {
  id        String       @id @default(uuid())
  type      ReactionType
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  message   Message      @relation(fields: [messageId], references: [id])
  messageId String
}

// RESOURCES ///////////////////////////////////////////////////////////

model Resource {
  id           String                 @id @unique @default(nanoid())
  isPinned     Boolean                @default(false)
  name         String?
  description  String?
  time         DateTime               @default(now())
  //
  scope        ResourcePrivacyTypes[]
  //
  driveUrl     String?
  fileId       String?
  //
  isAnonymous  Boolean                @default(false)
  isPrivate    Boolean                @default(false)
  //
  user         User                   @relation(fields: [userId], references: [id])
  userId       String
  //
  session      Session?               @relation(fields: [sessionId], references: [id])
  sessionId    String?
  committee    Committee?             @relation(fields: [committeeId], references: [id])
  committeeId  String?
  department   Department?            @relation(fields: [departmentId], references: [id])
  departmentId String?
}

// ANNOUNCEMENT ///////////////////////////////////////////////////////////

model Announcement {
  id           String                     @id @unique @default(nanoid())
  isPinned     Boolean                    @default(false)
  title        String?
  description  String?
  markdown     String?
  time         DateTime                   @default(now())
  editTime     DateTime                   @default(now())
  //
  slug         String?
  //
  type         AnnouncementType[]         @default([WEBSITE])
  //
  scope        AnnouncementPrivacyTypes[]
  //
  privacy      AnnouncementPrivacy        @default(NORMAL)
  //
  user         User                       @relation(fields: [userId], references: [id])
  userId       String
  //
  session      Session?                   @relation(fields: [sessionId], references: [id])
  sessionId    String?
  committee    Committee?                 @relation(fields: [committeeId], references: [id])
  committeeId  String?
  department   Department?                @relation(fields: [departmentId], references: [id])
  departmentId String?
}

model DraftResolution {
  id          String   @id @unique @default(uuid())
  name        String?
  submitter   Delegate @relation(fields: [submitterId], references: [id])
  submitterId String
  day         Day      @relation(fields: [dayId], references: [id])
  dayId       String
}

model General {
  id      Int      @id @default(autoincrement())
  string1 String?
  string2 String?
  string3 String?
  string4 String?
  string5 String?
  int1    Int?
  int2    Int?
  int3    Int?
  int4    Int?
  int5    Int?
  bool1   Boolean?
  bool2   Boolean?
  bool3   Boolean?
  bool4   Boolean?
  bool5   Boolean?
}

// ENUMS ///////////////////////////////////////////////////////////

enum ReactionType {
  LOVE
  LAUGH
  SURPRISED
  SAD
  ANGRY
  LIKE
  DISLIKE
}

enum CommitteeType {
  GENERALASSEMBLY
  SECURITYCOUNCIL
  SPECIALCOMMITTEE
}

enum AnnouncementType {
  EMAIL
  WEBSITE
}

enum AnnouncementPrivacy {
  ANONYMOUS
  BOARD
  SECRETARIAT
  NORMAL
}

enum DayType {
  CONFERENCE
  WORKSHOP
  EVENT
}

enum DepartmentType {
  APPROVAL
  CATERING
  FUNDING
  ADVERTISING
  IT
  SALES
  GRAPHIC
  SOCIAL
  PHOTO
  MEDINEWS
  PI
  PREP
  ADMINSTAFF
  DATA
  OTHER
}

enum DepartmentType2 {
  APPROVAL
  CATERING
  FUNDING
  ADVERTISING
  IT
  SALES
  GRAPHIC
  SOCIAL
  PHOTO
  MEDINEWS
  PI
  PREP
  ADMINSTAFF
  OTHER
}

enum AnnouncementPrivacyTypes {
  WEBSITE
  CHAIR
  MANAGER
  DELEGATE
  MEMBER
  SECRETARIAT
  SCHOOLDIRECTORS
  DIRECTORS
  SENIORDIRECTORS
  MEDIBOOK
  SESSIONWEBSITE
  SESSIONCHAIR
  SESSIONMANAGER
  SESSIONDELEGATE
  SESSIONMEMBER
  SESSIONSECRETARIAT
  SESSIONSCHOOLDIRECTORS
  SESSIONDIRECTORS
  SESSIONSENIORDIRECTORS
  COMMITTEEWEBSITE
  COMMITTEECHAIR
  COMMITTEEMANAGER
  COMMITTEEDELEGATE
  COMMITTEEMEMBER
  COMMITTEESECRETARIAT
  COMMITTEEDIRECTORS
  COMMITTEESENIORDIRECTORS
  DEPARTMENTWEBSITE
  DEPARTMENTMANAGER
  DEPARTMENTMEMBER
  DEPARTMENTSECRETARIAT
  DEPARTMENTDIRECTORS
  DEPARTMENTSENIORDIRECTORS
}

enum ResourcePrivacyTypes {
  SESSIONPROSPECTUS
  WEBSITE
  CHAIR
  MANAGER
  DELEGATE
  MEMBER
  SECRETARIAT
  SCHOOLDIRECTORS
  DIRECTORS
  SENIORDIRECTORS
  SESSIONWEBSITE
  SESSIONCHAIR
  SESSIONMANAGER
  SESSIONDELEGATE
  SESSIONMEMBER
  SESSIONSECRETARIAT
  SESSIONSCHOOLDIRECTORS
  SESSIONDIRECTORS
  SESSIONSENIORDIRECTORS
  COMMITTEEWEBSITE
  COMMITTEECHAIR
  COMMITTEEMANAGER
  COMMITTEEDELEGATE
  COMMITTEEMEMBER
  COMMITTEESECRETARIAT
  COMMITTEEDIRECTORS
  COMMITTEESENIORDIRECTORS
  DEPARTMENTWEBSITE
  DEPARTMENTMANAGER
  DEPARTMENTMEMBER
  DEPARTMENTSECRETARIAT
  DEPARTMENTDIRECTORS
  DEPARTMENTSENIORDIRECTORS
  SYSTEM
  PERSONAL
}

model ApplicationSchoolDirector {
  id         String   @id @default(nanoid())
  //
  isApproved Boolean  @default(false)
  //
  //
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  //
  school     School   @relation(fields: [schoolId], references: [id])
  schoolId   String
  //
  session    Session  @relation(fields: [sessionId], references: [id])
  sessionId  String
  //
  date       DateTime @default(now())

  @@unique([userId, schoolId, sessionId])
}
