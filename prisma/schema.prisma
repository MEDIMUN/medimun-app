datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model PendingUser {
  id                    Int      @id @default(autoincrement())
  //
  email                 String   @unique
  //
  officialName          String
  officialSurname       String
  //
  displayName           String?
  displaySurname        String?
  //
  password              String
  //
  dateOfBirth           String
  //
  timeCreated           DateTime @default(now())
  emailVerificationCode String
}

model User {
  id                            Int                                        @id @default(autoincrement())
  //
  showPhoneNumber               Boolean                                    @default(false)
  allowMessagesFromEveryone     Boolean                                    @default(false) @map("amfe")
  createdAt                     DateTime                                   @default(now())
  password                      String                                     @map("pw")
  userNumber                    String                                     @unique
  username                      String?
  //
  profileVisibility             Int                                        @default(5)
  organiserProfileVisibility    Int                                        @default(2)
  //
  email                         String                                     @unique
  phoneNumber                   String                                     @default("")
  //
  bio                           String                                     @default("")
  //
  officialName                  String
  officialSurname               String
  //
  displayName                   String?
  displaySurname                String?
  //
  nationality                   String?
  dateOfBirth                   DateTime                                   @map("dob")
  pronoun1                      String?                                    @default("")
  pronoun2                      String?                                    @default("")
  //
  member                        Member[]
  delegate                      Delegate[]
  schoolStudent                 SchoolStudent[]
  schoolDirector                SchoolDirector[]
  chair                         Chair[]
  manager                       Manager[]
  AssignedBy                    Task[]                                     @relation("assigned_by")
  AssignedTo                    Task[]                                     @relation("assigned_to")
  rollCall                      RollCall[]
  globalAdmin                   GlobalAdmin[]
  seniorDirecor                 SeniorDirector[]
  secretaryGeneral              SecretariatSecretaryGeneral[]
  presidentOfTheGeneralAssembly SecretariatPresidentOfTheGeneralAssembly[]
  deputySecretaryGeneral        SecretariatDeputySecretaryGeneral[]
}

model Session {
  id          Int     @id @default(autoincrement())
  //
  isCurrent   Boolean @default(false)
  number      Int     @unique
  //
  phrase1     String  @default("")
  phrase2     String  @default("")
  //
  description String  @default("")
  welcomeText String  @default("")

  explanation                   String                                     @default("")
  //
  committee                     Committee[]
  delegate                      Delegate[]
  chair                         Chair[]
  member                        Member[]
  manager                       Manager[]
  schoolDirector                SchoolDirector[]
  workshopDay                   WorkshopDay[]
  conferenceDay                 ConferenceDay[]
  task                          Task[]
  secretaryGeneral              SecretariatSecretaryGeneral[]
  presidentOfTheGeneralAssembly SecretariatPresidentOfTheGeneralAssembly[]
  deputySecretaryGeneral        SecretariatDeputySecretaryGeneral[]
  team                          Team[]
}

model GlobalAdmin {
  id     Int  @id @default(autoincrement())
  //
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model SeniorDirector {
  id     Int  @id @default(autoincrement())
  //
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model SecretariatSecretaryGeneral {
  id Int @id @default(autoincrement())

  userId    Int
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId Int
  User      User    @relation(fields: [userId], references: [id])
}

model SecretariatPresidentOfTheGeneralAssembly {
  id Int @id @default(autoincrement())

  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId Int
}

model SecretariatDeputySecretaryGeneral {
  id        Int     @id @default(autoincrement())
  //
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId Int
}

model ConferenceDay {
  id          Int        @id @default(autoincrement())
  //
  name        String?
  //
  startDate   DateTime
  endDate     DateTime
  //
  description String     @default("")
  //
  location    Location?  @relation(fields: [locationId], references: [id])
  locationId  Int?
  //
  session     Session    @relation(fields: [sessionId], references: [id])
  sessionId   Int
  //
  rollCall    RollCall[]
}

model WorkshopDay {
  id          Int        @id @default(autoincrement())
  //
  name        String?
  //
  startDate   DateTime
  endDate     DateTime
  //
  description String
  //
  location    Location?  @relation(fields: [locationId], references: [id])
  locationId  Int?
  //
  session     Session    @relation(fields: [sessionId], references: [id])
  sessionId   Int
  //
  rollCall    RollCall[]
}

model RollCall {
  id              Int            @id @default(autoincrement())
  //
  user            User           @relation(fields: [userId], references: [id])
  userId          Int
  //
  status          Int            @default(0)
  //
  workshopDay     WorkshopDay?   @relation(fields: [workshopDayId], references: [id])
  workshopDayId   Int?
  //
  conferenceDay   ConferenceDay? @relation(fields: [conferenceDayId], references: [id])
  conferenceDayId Int?
}

model School {
  id             Int              @id @default(autoincrement())
  //
  name           String           @unique
  slug           String?          @unique
  joinYear       Int?
  //
  Location       Location?        @relation(fields: [locationId], references: [id])
  locationId     Int?
  //
  SchoolMember   SchoolStudent[]
  SchoolDirector SchoolDirector[]
}

model SchoolStudent {
  id       Int    @id @default(autoincrement())
  //
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  //
  school   School @relation(fields: [schoolId], references: [id])
  schoolId Int
}

model SchoolDirector {
  id        Int     @id @default(autoincrement())
  //
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  //
  school    School  @relation(fields: [schoolId], references: [id])
  schoolId  Int
  //
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId Int
}

model Committee {
  id          Int        @id @default(autoincrement())
  //
  name        String
  description String     @default("")
  //
  session     Session    @relation(fields: [sessionId], references: [id])
  sessionId   Int
  //
  delegate    Delegate[]
  chair       Chair[]
}

model Delegate {
  id          Int       @id @default(autoincrement())
  country     String?
  //
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  //
  committee   Committee @relation(fields: [committeeId], references: [id])
  committeeId Int
  //
  session     Session   @relation(fields: [sessionId], references: [id])
  sessionId   Int
}

model Chair {
  id          Int       @id @default(autoincrement())
  //
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  //
  committee   Committee @relation(fields: [committeeId], references: [id])
  committeeId Int
  //
  session     Session   @relation(fields: [sessionId], references: [id])
  sessionId   Int
}

model Team {
  id          Int       @id @default(autoincrement())
  //
  name        String
  description String    @default("")
  //
  session     Session   @relation(fields: [sessionId], references: [id])
  sessionId   Int
  //
  member      Member[]
  manager     Manager[]
}

model Member {
  id        Int     @id @default(autoincrement())
  //
  job       String  @default("")
  //
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  //
  team      Team    @relation(fields: [teamId], references: [id])
  teamId    Int
  //
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId Int
}

model Manager {
  id        Int     @id @default(autoincrement())
  //
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  //
  team      Team    @relation(fields: [teamId], references: [id])
  teamId    Int
  //
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId Int
}

model Location {
  id                   Int             @id @default(autoincrement())
  //
  name                 String
  slug                 String?
  description          String?
  //
  street               String?
  city                 String?
  state                String?
  zipCode              String?
  country              String?
  //
  phone                String?
  email                String?
  website              String?
  //
  mapUrl               String?
  //
  School               School[]
  SessionConferenceDay ConferenceDay[]
  SessionWorkshopDay   WorkshopDay[]
}

model Task {
  id            Int       @id @default(autoincrement())
  //
  name          String
  description   String    @default("")
  isCompleted   Boolean   @default(false)
  //
  assignedDate  DateTime  @default(now())
  dueDate       DateTime?
  completedDate DateTime?
  //
  assignedBy    User      @relation("assigned_by", fields: [assignedById], references: [id])
  assignedById  Int
  //
  assignedTo    User?     @relation("assigned_to", fields: [assignedToId], references: [id])
  assignedToId  Int?
  //
  session       Session   @relation(fields: [sessionId], references: [id])
  sessionId     Int
}

model TermsAndConditions {
  id      Int    @id @default(autoincrement())
  title   String
  content String
}
