datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model PendingHalfUser {
  id       String   @id @default(nanoid())
  email    String   @unique
  //
  code     String
  //
  user     User?    @relation(fields: [userId], references: [id])
  userId   String?
  //
  school   School?  @relation(fields: [schoolId], references: [id])
  schoolId String?
  //
  time     DateTime @default(now())
}

model ResetPassword {
  id                String   @id @default(nanoid())
  timeCreated       DateTime @default(now())
  passwordResetCode String   @default(uuid())
  //
  user              User     @relation(fields: [userId], references: [id])
  userId            String
}

model PendingUser {
  id              String   @id @default(nanoid())
  email           String   @unique
  //
  officialName    String
  officialSurname String
  //
  code            String
  //
  time            DateTime @default(now())
  //
  school          School?  @relation(fields: [schoolId], references: [id])
  schoolId        String?
}

model Account {
  id       String @id @default(nanoid())
  password String
  //
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
}

model User {
  id                                  String                                @id @unique
  email                               String                                @unique
  phoneNumber                         String?
  profilePicture                      String?
  lastLogin                           DateTime?
  lastSessionUpdate                   DateTime?
  //
  bestTimeToReach                     String?
  //
  isDisabled                          Boolean                               @default(false)
  //
  officialName                        String
  officialSurname                     String
  displayName                         String?
  username                            String?                               @unique
  esStudentId                         String?                               @unique
  //
  nationality                         String?
  dateOfBirth                         DateTime?                             @map("dob")
  gender                              String?
  //
  bio                                 String?
  pronouns                            String?
  //
  isProfilePrivate                    Boolean                               @default(true)
  //
  Student                             School?                               @relation(fields: [schoolId], references: [id])
  schoolId                            String?
  //ACCOUNT
  member                              Member[]
  delegate                            Delegate[]
  schoolDirector                      SchoolDirector[]
  chair                               Chair[]
  manager                             Manager[]
  globalAdmin                         GlobalAdmin[]
  seniorDirecor                       SeniorDirector[]
  secretaryGeneral                    SecretaryGeneral[]
  presidentOfTheGeneralAssembly       PresidentOfTheGeneralAssembly[]
  deputySecretaryGeneral              DeputySecretaryGeneral[]
  admin                               Admin[]
  deputyPresidentOfTheGeneralAssembly DeputyPresidentOfTheGeneralAssembly[]
  Director                            Director[]
  Announcement                        Announcement[]
  CommitteeRollCall                   CommitteeRollCall[]
  Resource                            Resource[]
  ApplicationSchoolDirector           ApplicationSchoolDirector[]
  Invoice                             Invoice[]
  Blacklist                           Blacklist?
  PendingHalfUser                     PendingHalfUser[]
  Account                             Account[]
  ResetPassword                       ResetPassword[]
  MorningCode                         MorningCode[]

  GroupMember     GroupMember[]
  MorningPresent  MorningPresent[]
  Message         Message[]
  MessageReaction MessageReaction[]
}

model Group {
  id        String   @id @default(nanoid())
  name      String
  createdAt DateTime @default(now())

  GroupMember GroupMember[]
  Message     Message[]
}

model GroupMember {
  id      String  @id @default(nanoid())
  user    User    @relation(fields: [userId], references: [id])
  userId  String
  group   Group   @relation(fields: [groupId], references: [id])
  groupId String
  isAdmin Boolean @default(false)

  @@unique([userId, groupId])
}

model Message {
  id              String            @id @default(nanoid())
  markdown        String
  resources       Resource[]
  isDeleted       Boolean           @default(false)
  isPinned        Boolean           @default(false)
  createdAt       DateTime          @default(now())
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  group           Group             @relation(fields: [groupId], references: [id])
  groupId         String
  MessageReaction MessageReaction[]
  //replies
  replies         Message[]         @relation("MessageReplies")
  replyTo         Message?          @relation("MessageReplies", fields: [replyToId], references: [id])
  replyToId       String?
}

model MessageReaction {
  id        String  @id @default(nanoid())
  reaction  String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  message   Message @relation(fields: [messageId], references: [id])
  messageId String

  @@unique([userId, messageId])
}

model Session {
  id                                             String                                  @id @unique @default(nanoid())
  isCurrent                                      Boolean                                 @default(false)
  isMainShown                                    Boolean                                 @default(false)
  //
  isPartlyVisible                                Boolean                                 @default(false)
  isVisible                                      Boolean                                 @default(false)
  //
  directorPrice                                  Int                                     @default(0)
  delegatePrice                                  Int                                     @default(0)
  isPriceLocked                                  Boolean                                 @default(false)
  //
  isSchoolDirectorApplicationsForceOpen          Boolean                                 @default(false)
  isSchoolDirectorApplicationsAutoOpen           Boolean                                 @default(false)
  schoolDirectorApplicationsAutoOpenTime         DateTime?
  schoolDirectorApplicationsAutoCloseTime        DateTime?
  //
  isSecretariatApplicationsForceOpen             Boolean                                 @default(false)
  isSecretariatApplicationsAutoOpen              Boolean                                 @default(false)
  secretariatApplicationsAutoOpenTime            DateTime?
  secretariatApplicationsAutoCloseTime           DateTime?
  //
  isChairAplicationsForceOpen                    Boolean                                 @default(false)
  isChairApplicationsAutoOpen                    Boolean                                 @default(false)
  chairApplicationsAutoOpenTime                  DateTime?
  chairApplicationsAutoCloseTime                 DateTime?
  //
  isDelegateApplicationsForceOpen                Boolean                                 @default(false)
  isDelegateApplicationsAutoOpen                 Boolean                                 @default(false)
  delegateApplicationsAutoOpenTime               DateTime?
  delegateApplicationsAutoCloseTime              DateTime?
  //
  isMemberApplicationsForceOpen                  Boolean                                 @default(false)
  isMemberApplicationsAutoOpen                   Boolean                                 @default(false)
  memberApplicationsAutoOpenTime                 DateTime?
  memberApplicationsAutoCloseTime                DateTime?
  //
  isManagerApplicationsForceOpen                 Boolean                                 @default(false)
  isManagerApplicationsAutoOpen                  Boolean                                 @default(false)
  managerApplicationsAutoOpenTime                DateTime?
  managerApplicationsAutoCloseTime               DateTime?
  //
  number                                         String                                  @unique
  numberInteger                                  Int                                     @unique
  //
  theme                                          String?
  subTheme                                       String?
  //
  description                                    String?
  welcomeText                                    String?
  about                                          String?
  //
  cover                                          String?
  //
  committee                                      Committee[]
  department                                     Department[]
  //
  schoolDirector                                 SchoolDirector[]
  Day                                            Day[]
  //
  secretaryGeneral                               SecretaryGeneral[]
  presidentOfTheGeneralAssembly                  PresidentOfTheGeneralAssembly[]
  deputySecretaryGeneral                         DeputySecretaryGeneral[]
  deputyPresidentOfTheGeneralAssembly            DeputyPresidentOfTheGeneralAssembly[]
  //
  Announcement                                   Announcement[]
  Resource                                       Resource[]
  //
  data                                           String?
  //
  savedDelegationDeclarationState                String?
  savedState                                     String?
  //
  securityCouncilCountriesOfYear                 String[]                                @default(["CN", "FR", "RU", "GB", "US"])
  countriesOfSession                             String[]                                @default(["CN", "FR", "RU", "GB", "US"])
  maxNumberOfGeneralAssemblyDelegationsPerSchool Int?
  minimumDelegateAgeOnFirstConferenceDay         Int?
  maximumDelegateAgeOnFirstConferenceDay         Int?
  ApplicationSchoolDirector                      ApplicationSchoolDirector[]
  SchoolDelegationProposal                       SchoolDelegationProposal[]
  Invoice                                        Invoice[]
  finalDelegation                                finalDelegation[]
  ApplicationDelegationPreferences               ApplicationDelegationPreferences[]
  ApplicationGrantedDelegationCountries          ApplicationGrantedDelegationCountries[]
  Blacklist                                      Blacklist[]
}

model Invoice {
  id                 String    @id @default(nanoid())
  number             Int       @unique @default(autoincrement())
  date               DateTime  @default(now())
  dueDate            DateTime?
  items              String
  description        String?
  isPaid             Boolean   @default(false)
  //
  user               User?     @relation(fields: [userId], references: [id])
  userId             String?
  //
  receiptUrl         String?
  originalReceiptUrl String?
  //
  session            Session   @relation(fields: [sessionId], references: [id])
  sessionId          String
  //
  school             School?   @relation(fields: [schoolId], references: [id])
  schoolId           String?
}

model finalDelegation {
  id         String  @id @default(nanoid())
  //
  delegation String
  proposal   String?
  school     School  @relation(fields: [schoolId], references: [id])
  schoolId   String
  session    Session @relation(fields: [sessionId], references: [id])
  sessionId  String

  @@unique([schoolId, sessionId])
  @@unique([delegation, sessionId])
}

model ApplicationDelegationPreferences {
  id                  String   @id @default(nanoid())
  date                DateTime @default(now())
  //
  numberOfGACountries Int
  countyPreferences   String[]
  school              School   @relation(fields: [schoolId], references: [id])
  schoolId            String
  session             Session  @relation(fields: [sessionId], references: [id])
  sessionId           String
}

model ApplicationGrantedDelegationCountries {
  id        String   @id @default(nanoid())
  //
  countries String[]
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  session   Session  @relation(fields: [sessionId], references: [id])
  sessionId String
}

model SchoolDelegationProposal {
  id         String   @id @default(nanoid())
  //
  date       DateTime @default(now())
  //
  assignment String
  changes    String?
  //
  school     School   @relation(fields: [schoolId], references: [id])
  schoolId   String
  //
  session    Session  @relation(fields: [sessionId], references: [id])
  sessionId  String
}

model Day {
  id             String           @id @default(nanoid())
  type           DayType
  name           String?
  description    String?
  date           DateTime?        @unique
  location       Location?        @relation(fields: [locationId], references: [id])
  locationId     String?
  session        Session          @relation(fields: [sessionId], references: [id])
  sessionId      String
  RollCall       RollCall[]
  MorningCode    MorningCode[]
  MorningPresent MorningPresent[]

  @@unique([sessionId, date])
}

model GlobalAdmin {
  id   String @id @unique
  user User   @relation(fields: [id], references: [id])
}

model Admin {
  id   String @id @unique
  user User   @relation(fields: [id], references: [id])
}

model SeniorDirector {
  id   String @id @unique
  user User   @relation(fields: [id], references: [id])
}

model Director {
  id   String @id @unique
  user User   @relation(fields: [id], references: [id])
}

model SecretaryGeneral {
  id        String  @id @default(uuid())
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  @@unique([userId, sessionId])
}

model DeputySecretaryGeneral {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  @@unique([userId, sessionId])
}

model PresidentOfTheGeneralAssembly {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  @@unique([userId, sessionId])
}

model DeputyPresidentOfTheGeneralAssembly {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  @@unique([userId, sessionId])
}

model Chair {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  committee   Committee @relation(fields: [committeeId], references: [id], onDelete: Cascade)
  committeeId String

  @@unique([userId, committeeId])
}

model Manager {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String

  @@unique([userId, departmentId])
}

model Delegate {
  id          String    @id @default(uuid())
  country     String?
  //
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  //
  committee   Committee @relation(fields: [committeeId], references: [id], onDelete: Cascade)
  committeeId String

  @@unique([userId, committeeId])
}

model Member {
  id           Int        @id @default(autoincrement())
  //
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  //
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String

  @@unique([userId, departmentId])
}

model SchoolDirector {
  id        Int     @id @default(autoincrement())
  //
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  //
  school    School  @relation(fields: [schoolId], references: [id])
  schoolId  String
  //
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  @@unique([userId, schoolId, sessionId])
}

enum RoleType {
  globalAdmin
  admin
  //
  seniorDirector
  director
  //
  secretaryGeneral
  deputySecretaryGeneral
  //
  presidentOfTheGeneralAssembly
  deputyPresidentOfTheGeneralAssembly
  //
  chair
  delegate
  member
  manager
  schoolDirector
}

model Committee {
  id           String         @id @unique @default(uuid())
  name         String
  description  String?
  shortName    String?
  slug         String?
  isVisible    Boolean        @default(false)
  //
  type         CommitteeType  @default(GENERALASSEMBLY)
  //
  session      Session        @relation(fields: [sessionId], references: [id])
  sessionId    String
  //
  delegate     Delegate[]
  chair        Chair[]
  Announcement Announcement[]
  Resource     Resource[]
  ExtraCountry ExtraCountry[]
  Topic        Topic[]

  @@unique([sessionId, name])
  @@unique([sessionId, shortName])
  @@unique([sessionId, slug])
}

model Topic {
  id          String    @id @default(nanoid())
  //
  title       String
  description String?
  //
  committee   Committee @relation(fields: [committeeId], references: [id], onDelete: Cascade)
  committeeId String
}

model ExtraCountry {
  id            String    @id @default(nanoid())
  countryCode   String
  //
  countryNameEn String
  //
  isPowerToVeto Boolean   @default(false)
  //
  committee     Committee @relation(fields: [committeeId], references: [id], onDelete: Cascade)
  committeeId   String

  @@unique([committeeId, countryCode])
}

model Blacklist {
  id                String   @id @default(nanoid())
  //
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @unique
  //
  session           Session? @relation(fields: [sessionId], references: [id])
  sessionId         String?
  //
  description       String?
  publicDescription String?
}

model Department {
  id           String           @id @default(uuid())
  name         String
  shortName    String?
  slug         String?
  isVisible    Boolean          @default(false)
  //
  type         DepartmentType[]
  //
  session      Session          @relation(fields: [sessionId], references: [id])
  sessionId    String
  //
  member       Member[]
  manager      Manager[]
  Resource     Resource[]
  Announcement Announcement[]
}

model Policy {
  id          String  @id @default(nanoid())
  title       String
  description String?
  slug        String?
  markdown    String?
}

model Location {
  id       String   @id @default(nanoid())
  name     String
  slug     String?
  isPublic Boolean  @default(false)
  //
  street   String?
  city     String?
  state    String?
  zipCode  String?
  country  String?
  //
  cover    String?
  //
  phone    String?
  email    String?
  website  String?
  school   School[]
  Day      Day[]
}

model School {
  id                                    String                                  @id @default(nanoid())
  name                                  String                                  @unique
  slug                                  String?                                 @unique
  joinYear                              Int?
  isPublic                              Boolean                                 @default(false)
  //
  cover                                 String?
  //
  phone                                 String?
  email                                 String?
  website                               String?
  location                              Location?                               @relation(fields: [locationId], references: [id])
  locationId                            String?
  director                              SchoolDirector[]
  User                                  User[]
  ApplicationSchoolDirector             ApplicationSchoolDirector[]
  SchoolDelegationProposal              SchoolDelegationProposal[]
  Invoice                               Invoice[]
  finalDelegation                       finalDelegation[]
  ApplicationDelegationPreferences      ApplicationDelegationPreferences[]
  ApplicationGrantedDelegationCountries ApplicationGrantedDelegationCountries[]
  PendingHalfUser                       PendingHalfUser[]
  PendingUser                           PendingUser[]
}

// ROLL CALLS ///////////////////////////////////////////////////////////

model RollCall {
  id                String              @id @default(nanoid())
  name              String?
  index             Int                 @default(0)
  day               Day                 @relation(fields: [dayId], references: [id])
  dayId             String
  CommitteeRollCall CommitteeRollCall[]
}

model CommitteeRollCall {
  id         String       @id @default(uuid())
  type       RollCallType
  user       User         @relation(fields: [userId], references: [id])
  userId     String
  rollCall   RollCall?    @relation(fields: [rollCallId], references: [id])
  rollCallId String?

  @@unique([userId, rollCallId])
}

enum RollCallType {
  PRESENT
  PRESENTANDVOTING
}

model MorningCode {
  code   String @id @default(uuid())
  //
  user   User   @relation(fields: [userId], references: [id])
  userId String
  //
  day    Day    @relation(fields: [dayId], references: [id])
  dayId  String

  @@unique([userId, dayId])
}

model MorningPresent {
  id     String @id @default(nanoid())
  //
  user   User   @relation(fields: [userId], references: [id])
  userId String
  //
  day    Day    @relation(fields: [dayId], references: [id])
  dayId  String

  @@unique([userId, dayId])
}

// RESOURCES ///////////////////////////////////////////////////////////

model Resource {
  id           String                 @id @unique @default(nanoid())
  isPinned     Boolean                @default(false)
  name         String?
  description  String?
  time         DateTime               @default(now())
  //
  scope        ResourcePrivacyTypes[]
  //
  driveUrl     String?
  fileId       String?
  //
  isAnonymous  Boolean                @default(false)
  isPrivate    Boolean                @default(false)
  //
  user         User                   @relation(fields: [userId], references: [id])
  userId       String
  //
  session      Session?               @relation(fields: [sessionId], references: [id])
  sessionId    String?
  committee    Committee?             @relation(fields: [committeeId], references: [id])
  committeeId  String?
  department   Department?            @relation(fields: [departmentId], references: [id])
  departmentId String?
  Message      Message?               @relation(fields: [messageId], references: [id])
  messageId    String?
}

// ANNOUNCEMENT ///////////////////////////////////////////////////////////

model Announcement {
  id           String                     @id @unique @default(nanoid())
  isPinned     Boolean                    @default(false)
  title        String?
  description  String?
  markdown     String?
  time         DateTime                   @default(now())
  editTime     DateTime                   @default(now())
  views        Int                        @default(0)
  //
  slug         String?
  //
  type         AnnouncementType[]         @default([WEBSITE])
  //
  scope        AnnouncementPrivacyTypes[]
  //
  privacy      AnnouncementPrivacy        @default(NORMAL)
  //
  user         User                       @relation(fields: [userId], references: [id])
  userId       String
  //
  session      Session?                   @relation(fields: [sessionId], references: [id])
  sessionId    String?
  committee    Committee?                 @relation(fields: [committeeId], references: [id])
  committeeId  String?
  department   Department?                @relation(fields: [departmentId], references: [id])
  departmentId String?
}

model General {
  id      Int      @id @default(autoincrement())
  string1 String?
  string2 String?
  string3 String?
  string4 String?
  string5 String?
  int1    Int?
  int2    Int?
  int3    Int?
  int4    Int?
  int5    Int?
  bool1   Boolean?
  bool2   Boolean?
  bool3   Boolean?
  bool4   Boolean?
  bool5   Boolean?
}

// ENUMS ///////////////////////////////////////////////////////////

enum CommitteeType {
  GENERALASSEMBLY
  SECURITYCOUNCIL
  SPECIALCOMMITTEE
}

enum AnnouncementType {
  EMAIL
  WEBSITE
}

enum AnnouncementPrivacy {
  ANONYMOUS
  BOARD
  SECRETARIAT
  NORMAL
}

enum DayType {
  CONFERENCE
  WORKSHOP
  EVENT
}

enum DepartmentType {
  APPROVAL
  CATERING
  FUNDING
  ADVERTISING
  IT
  SALES
  GRAPHIC
  SOCIAL
  PHOTO
  MEDINEWS
  PI
  PREP
  ADMINSTAFF
  DATA
  OTHER
}

enum AnnouncementPrivacyTypes {
  WEBSITE
  CHAIR
  MANAGER
  DELEGATE
  MEMBER
  SECRETARIAT
  SCHOOLDIRECTORS
  DIRECTORS
  SENIORDIRECTORS
  MEDIBOOK
  SESSIONWEBSITE
  SESSIONCHAIR
  SESSIONMANAGER
  SESSIONDELEGATE
  SESSIONMEMBER
  SESSIONSECRETARIAT
  SESSIONSCHOOLDIRECTORS
  SESSIONDIRECTORS
  SESSIONSENIORDIRECTORS
  COMMITTEEWEBSITE
  COMMITTEECHAIR
  COMMITTEEMANAGER
  COMMITTEEDELEGATE
  COMMITTEEMEMBER
  COMMITTEESECRETARIAT
  COMMITTEEDIRECTORS
  COMMITTEESENIORDIRECTORS
  DEPARTMENTWEBSITE
  DEPARTMENTMANAGER
  DEPARTMENTMEMBER
  DEPARTMENTSECRETARIAT
  DEPARTMENTDIRECTORS
  DEPARTMENTSENIORDIRECTORS
}

enum ResourcePrivacyTypes {
  SESSIONPROSPECTUS
  WEBSITE
  CHAIR
  MANAGER
  DELEGATE
  MEMBER
  SECRETARIAT
  SCHOOLDIRECTORS
  DIRECTORS
  SENIORDIRECTORS
  SESSIONWEBSITE
  SESSIONCHAIR
  SESSIONMANAGER
  SESSIONDELEGATE
  SESSIONMEMBER
  SESSIONSECRETARIAT
  SESSIONSCHOOLDIRECTORS
  SESSIONDIRECTORS
  SESSIONSENIORDIRECTORS
  COMMITTEEWEBSITE
  COMMITTEECHAIR
  COMMITTEEMANAGER
  COMMITTEEDELEGATE
  COMMITTEEMEMBER
  COMMITTEESECRETARIAT
  COMMITTEEDIRECTORS
  COMMITTEESENIORDIRECTORS
  DEPARTMENTWEBSITE
  DEPARTMENTMANAGER
  DEPARTMENTMEMBER
  DEPARTMENTSECRETARIAT
  DEPARTMENTDIRECTORS
  DEPARTMENTSENIORDIRECTORS
  SYSTEM
  PERSONAL
}

model ApplicationSchoolDirector {
  id         String   @id @default(nanoid())
  //
  isApproved Boolean  @default(false)
  //
  //
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  //
  school     School   @relation(fields: [schoolId], references: [id])
  schoolId   String
  //
  session    Session  @relation(fields: [sessionId], references: [id])
  sessionId  String
  //
  date       DateTime @default(now())

  @@unique([userId, schoolId, sessionId])
}

//model Role {
//  @@unique([userId, sessionId, type])
//  @@unique([userId, schoolId, sessionId])
//  @@unique([userId, country, committeeId])
//  @@unique([userId, type, departmentId])
//  @@unique([userId, type, committeeId])
//  @@unique([userId, committeeId])
//  @@unique([userId, departmentId])
//}
