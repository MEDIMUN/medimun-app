datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model PendingUser {
  id                    Int       @id @default(autoincrement())
  email                 String    @unique
  password              String
  officialName          String
  officialSurname       String
  nationality           String?
  dateOfBirth           DateTime?
  timeCreated           DateTime  @default(now())
  emailVerificationCode String
}

model passwordReset {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  timeCreated       DateTime @default(now())
  passwordResetCode String
}

model Account {
  id          Int      @id @default(autoincrement())
  password    String
  timeCreated DateTime @default(now())
  user        User[]
}

model User {
  id                                  Int                                   @id @default(autoincrement())
  //
  userNumber                          String                                @unique
  email                               String                                @unique
  phoneNumber                         String?
  //
  isDisabled                          Boolean                               @default(false)
  //
  officialName                        String
  officialSurname                     String
  displayName                         String?
  username                            String?                               @unique
  //
  nationality                         String?
  dateOfBirth                         DateTime?                             @map("dob")
  gender                              String?
  //
  bio                                 String?
  pronoun1                            String?
  pronoun2                            String?
  //
  showPhoneNumber                     Boolean                               @default(false) @map("spn")
  allowMessagesFromEveryone           Boolean                               @default(false) @map("amfe")
  profileVisibility                   Int                                   @default(5) @map("pv")
  organiserProfileVisibility          Int                                   @default(2) @map("opv")
  //ACCOUNT
  account                             Account?                              @relation(fields: [accountId], references: [id])
  accountId                           Int?
  //
  member                              Member[]
  delegate                            Delegate[]
  schoolDirector                      SchoolDirector[]
  chair                               Chair[]
  manager                             Manager[]
  globalAdmin                         GlobalAdmin[]
  seniorDirecor                       SeniorDirector[]
  secretaryGeneral                    SecretaryGeneral[]
  presidentOfTheGeneralAssembly       PresidentOfTheGeneralAssembly[]
  deputySecretaryGeneral              DeputySecretaryGeneral[]
  admin                               Admin[]
  message                             Message[]
  reaction                            Reaction[]
  student                             Student[]
  chatMemeber                         ChatMemeber[]
  groupChatMemeber                    GroupChatMemeber[]
  deputyPresidentOfTheGeneralAssembly DeputyPresidentOfTheGeneralAssembly[]
  organiser                           Organiser[]
  Announcement                        Announcement[]
}

model Session {
  id                                  Int                                   @id @default(autoincrement())
  //
  isCurrent                           Boolean                               @default(false)
  number                              String                                @unique
  numberInteger                       Int                                   @unique
  //
  theme                               String                                @default("")
  phrase2                             String                                @default("")
  //
  description                         String                                @default("")
  welcomeText                         String                                @default("")
  //
  explanation                         String                                @default("")
  //
  committee                           Committee[]
  schoolDirector                      SchoolDirector[]
  workshopDay                         WorkshopDay[]
  conferenceDay                       ConferenceDay[]
  secretaryGeneral                    SecretaryGeneral[]
  presidentOfTheGeneralAssembly       PresidentOfTheGeneralAssembly[]
  deputySecretaryGeneral              DeputySecretaryGeneral[]
  department                          Department[]
  chat                                Chat[]
  groupChat                           GroupChat[]
  deputyPresidentOfTheGeneralAssembly DeputyPresidentOfTheGeneralAssembly[]
  organiser                           Organiser[]
  SessionAnnouncement                 SessionAnnouncement[]
  ChairAnnouncement                   ChairAnnouncement[]
  ManagerAnnouncement                 ManagerAnnouncement[]
}

model GlobalAdmin {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Admin {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model SeniorDirector {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model SecretaryGeneral {
  id        Int     @id @default(autoincrement())
  userId    Int
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId Int
  User      User    @relation(fields: [userId], references: [id])
}

model DeputySecretaryGeneral {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId Int
}

model PresidentOfTheGeneralAssembly {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId Int
}

model DeputyPresidentOfTheGeneralAssembly {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId Int
}

model Organiser {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId Int
}

model ConferenceDay {
  id          Int       @id @default(autoincrement())
  name        String?
  description String?
  date        DateTime?
  location    Location? @relation(fields: [locationId], references: [id])
  locationId  Int?
  session     Session   @relation(fields: [sessionId], references: [id])
  sessionId   Int
}

model WorkshopDay {
  id          Int       @id @default(autoincrement())
  name        String?
  description String?
  date        DateTime?
  location    Location? @relation(fields: [locationId], references: [id])
  locationId  Int?
  session     Session   @relation(fields: [sessionId], references: [id])
  sessionId   Int
}

model School {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  slug        String           @unique
  joinYear    Int?
  location    Location?        @relation(fields: [locationId], references: [id])
  locationId  Int?
  director    SchoolDirector[]
  student     Student[]
}

model Student {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  school   School @relation(fields: [schoolId], references: [id])
  schoolId Int
}

model SchoolDirector {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  school    School  @relation(fields: [schoolId], references: [id])
  schoolId  Int
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId Int
}

model Committee {
  id                String                  @id @unique @default(uuid())
  name              String
  shortName         String?
  slug              String?
  description       String?
  type              CommitteeType
  topic1            String?
  topic1description String?
  topic2            String?
  topic2description String?
  topic3            String?
  topic3description String?
  session           Session                 @relation(fields: [sessionId], references: [id])
  sessionId         Int
  delegate          Delegate[]
  chair             Chair[]
  channel           Channel[]
  announcement      CommitteeAnnouncement[]
  ChairAnnouncement ChairAnnouncement[]
}

model Delegate {
  id          Int       @id @default(autoincrement())
  country     String?
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  committee   Committee @relation(fields: [committeeId], references: [id])
  committeeId String
}

model Chair {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  committee   Committee @relation(fields: [committeeId], references: [id])
  committeeId String
}

model Department {
  id                  String                   @id @default(uuid())
  name                String
  shortName           String?
  slug                String?
  description         String?
  isMedinews          Boolean                  @default(false)
  isIt                Boolean                  @default(false)
  isShop              Boolean                  @default(false)
  session             Session                  @relation(fields: [sessionId], references: [id])
  sessionId           Int
  member              Member[]
  manager             Manager[]
  channel             Channel[]
  announcement        DepartmentAnnouncement[]
  ManagerAnnouncement ManagerAnnouncement[]
}

model Member {
  id           Int        @id @default(autoincrement())
  job          String?
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
}

model Manager {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
}

model Location {
  id            Int             @id @default(autoincrement())
  name          String
  slug          String?
  description   String?
  street        String?
  city          String?
  state         String?
  zipCode       String?
  country       String?
  phone         String?
  email         String?
  website       String?
  mapUrl        String?
  school        School[]
  conferenceDay ConferenceDay[]
  workshopDay   WorkshopDay[]
}

// CHAT GROUPS ///////////////////////////////////////////////////////////

model Chat {
  id        Int           @id @default(autoincrement())
  name      String?
  message   Message[]
  member    ChatMemeber[]
  Session   Session?      @relation(fields: [sessionId], references: [id])
  sessionId Int?
}

model ChatMemeber {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int
}

model GroupChat {
  id        Int                @id @default(autoincrement())
  session   Session            @relation(fields: [sessionId], references: [id])
  sessionId Int
  message   Message[]
  member    GroupChatMemeber[]
}

model GroupChatMemeber {
  id     Int       @id @default(autoincrement())
  user   User      @relation(fields: [userId], references: [id])
  userId Int
  chat   GroupChat @relation(fields: [chatId], references: [id])
  chatId Int
}

model Channel {
  id           Int         @id @default(autoincrement())
  name         String
  description  String
  committee    Committee?  @relation(fields: [committeeId], references: [id])
  committeeId  String?
  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?
  message      Message[]
}

// MESSAGE ///////////////////////////////////////////////////////////

model Message {
  id          Int        @id @default(autoincrement())
  //
  content     String
  time        DateTime   @default(now())
  sender      User       @relation(fields: [senderId], references: [id])
  senderId    Int
  //
  chat        Chat?      @relation(fields: [chatId], references: [id])
  chatId      Int?
  groupChat   GroupChat? @relation(fields: [groupChatId], references: [id])
  groupChatId Int?
  replyTo     Message?   @relation("reply", fields: [replyToId], references: [id])
  replyToId   Int?
  replies     Message[]  @relation("reply")
  //
  reaction    Reaction[]
  channel     Channel?   @relation(fields: [channelId], references: [id])
  channelId   Int?
}

model Reaction {
  id        Int          @id @default(autoincrement())
  //
  type      ReactionType
  //
  sender    User         @relation(fields: [senderId], references: [id])
  senderId  Int
  //
  message   Message      @relation(fields: [messageId], references: [id])
  messageId Int
}

// ANNOUNCEMENT ///////////////////////////////////////////////////////////

model Announcement {
  id                     String                   @id @default(uuid())
  time                   DateTime                 @default(now())
  editTime               DateTime                 @default(now())
  //
  isAnonymous            Boolean                  @default(false)
  isSecretariat          Boolean                  @default(false)
  isBoard                Boolean                  @default(false)
  //
  isPinned               Boolean                  @default(false)
  //
  title                  String
  description            String
  markdown               String
  //
  user                   User                     @relation(fields: [userId], references: [id])
  userId                 Int
  GlobalAnnouncement     GlobalAnnouncement[]
  MediBookAnnouncement   MediBookAnnouncement[]
  AlumniAnnouncement     AlumniAnnouncement[]
  WebsiteAnnouncement    WebsiteAnnouncement[]
  SessionAnnouncement    SessionAnnouncement[]
  DepartmentAnnouncement DepartmentAnnouncement[]
  CommitteeAnnouncement  CommitteeAnnouncement[]
  ChairAnnouncement      ChairAnnouncement[]
  ManagerAnnouncement    ManagerAnnouncement[]
  ApplicanAnnouncement   ApplicanAnnouncement[]
}

model GlobalAnnouncement {
  id             Int          @id @default(autoincrement())
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String
}

model MediBookAnnouncement {
  id             Int          @id @default(autoincrement())
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String
}

model AlumniAnnouncement {
  id             Int          @id @default(autoincrement())
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String
}

model WebsiteAnnouncement {
  id             Int          @id @default(autoincrement())
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String
}

model SessionAnnouncement {
  id             Int          @id @default(autoincrement())
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String
  session        Session      @relation(fields: [sessionId], references: [id])
  sessionId      Int
}

model DepartmentAnnouncement {
  id             Int          @id @default(autoincrement())
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String
  department     Department   @relation(fields: [departmentId], references: [id])
  departmentId   String
}

model CommitteeAnnouncement {
  id             Int          @id @default(autoincrement())
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String
  committee      Committee    @relation(fields: [committeeId], references: [id])
  committeeId    String
}

model ChairAnnouncement {
  id             Int          @id @default(autoincrement())
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String
  session        Session?     @relation(fields: [sessionId], references: [id])
  sessionId      Int?
  committee      Committee?   @relation(fields: [committeeId], references: [id])
  committeeId    String?
}

model ManagerAnnouncement {
  id             Int          @id @default(autoincrement())
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String
  session        Session?     @relation(fields: [sessionId], references: [id])
  sessionId      Int?
  department     Department?  @relation(fields: [departmentId], references: [id])
  departmentId   String?
}

model ApplicanAnnouncement {
  id             Int          @id @default(autoincrement())
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String
}

// TERMS, CONDITIONS AND PRIVACY ///////////////////////////////////////////////////////////

model Term {
  id      Int    @id @default(autoincrement())
  index   Int    @default(0)
  title   String
  content String
}

model Privacy {
  id      Int    @id @default(autoincrement())
  index   Int    @default(0)
  title   String
  content String
}

// ENUMS ///////////////////////////////////////////////////////////

enum ReactionType {
  LOVE
  LAUGH
  SURPRISED
  SAD
  ANGRY
  LIKE
  DISLIKE
}

enum CommitteeType {
  GENERALASSEMBLY
  SECURITYCOUNCIL
  SPECIALCOMMITTEE
}
