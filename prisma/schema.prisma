datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model PendingUser {
  id                    Int       @id @default(autoincrement())
  email                 String    @unique
  password              String
  officialName          String
  officialSurname       String
  nationality           String?
  dateOfBirth           DateTime?
  timeCreated           DateTime  @default(now())
  emailVerificationCode String
}

model passwordReset {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  timeCreated       DateTime @default(now())
  passwordResetCode String
}

model Account {
  id          String   @id @default(uuid())
  password    String
  timeCreated DateTime @default(now())
  lastLogin   DateTime
  user        User[]
}

model SecurityCouncilCountry {
  id          String    @id @default(uuid())
  countryCode String
  committee   Committee @relation(fields: [committeeId], references: [id])
  committeeId String
}

model User {
  id                                  String                                @id @unique
  email                               String                                @unique
  phoneNumber                         String?
  phoneCode                           String?
  profilePicture                      String?
  //
  isDisabled                          Boolean                               @default(false)
  //
  officialName                        String
  officialSurname                     String
  displayName                         String?
  username                            String?                               @unique
  //
  nationality                         String?
  dateOfBirth                         DateTime?                             @map("dob")
  gender                              String?
  //
  bio                                 String?
  pronoun1                            String?
  pronoun2                            String?
  //
  allowProfilePictureUpdate           Boolean                               @default(true)
  allowBioUpdate                      Boolean                               @default(false)
  isProfilePrivate                    Boolean                               @default(true)
  //ACCOUNT
  account                             Account?                              @relation(fields: [accountId], references: [id])
  accountId                           String?                               @unique
  //
  member                              Member[]
  delegate                            Delegate[]
  schoolDirector                      SchoolDirector[]
  chair                               Chair[]
  manager                             Manager[]
  globalAdmin                         GlobalAdmin[]
  seniorDirecor                       SeniorDirector[]
  secretaryGeneral                    SecretaryGeneral[]
  presidentOfTheGeneralAssembly       PresidentOfTheGeneralAssembly[]
  deputySecretaryGeneral              DeputySecretaryGeneral[]
  admin                               Admin[]
  message                             Message[]
  reaction                            Reaction[]
  student                             Student[]
  chatMemeber                         ChatMemeber[]
  groupChatMemeber                    GroupChatMemeber[]
  deputyPresidentOfTheGeneralAssembly DeputyPresidentOfTheGeneralAssembly[]
  organiser                           Organiser[]
  Director                            Director[]
  CommitteeAnnouncement               CommitteeAnnouncement[]
  GlobalAnnouncement                  GlobalAnnouncement[]
  MediBookAnnouncement                MediBookAnnouncement[]
  WebsiteAnnouncement                 WebsiteAnnouncement[]
  SessionAnnouncement                 SessionAnnouncement[]
  DepartmentAnnouncement              DepartmentAnnouncement[]
  ApplicantAnnouncement               ApplicantAnnouncement[]
}

model Session {
  id                                  String                                @id @default(uuid())
  //
  isCurrent                           Boolean                               @default(false)
  number                              String                                @unique
  numberInteger                       Int                                   @unique
  //
  theme                               String                                @default("")
  phrase2                             String                                @default("")
  //
  description                         String                                @default("")
  welcomeText                         String                                @default("")
  //
  explanation                         String                                @default("")
  //
  committee                           Committee[]
  schoolDirector                      SchoolDirector[]
  workshopDay                         WorkshopDay[]
  conferenceDay                       ConferenceDay[]
  secretaryGeneral                    SecretaryGeneral[]
  presidentOfTheGeneralAssembly       PresidentOfTheGeneralAssembly[]
  deputySecretaryGeneral              DeputySecretaryGeneral[]
  department                          Department[]
  chat                                Chat[]
  groupChat                           GroupChat[]
  deputyPresidentOfTheGeneralAssembly DeputyPresidentOfTheGeneralAssembly[]
  organiser                           Organiser[]
  SessionAnnouncement                 SessionAnnouncement[]
  CommitteeAnnouncement               CommitteeAnnouncement[]
}

model GlobalAdmin {
  id   String @id @unique
  user User   @relation(fields: [id], references: [id])
}

model Admin {
  id   String @id @unique
  user User   @relation(fields: [id], references: [id])
}

model SeniorDirector {
  id   String @id @unique
  user User   @relation(fields: [id], references: [id])
}

model Director {
  id   String @id @unique
  user User   @relation(fields: [id], references: [id])
}

model SecretaryGeneral {
  id        String  @id @default(uuid())
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String
  User      User    @relation(fields: [userId], references: [id])
  userId    String

  @@unique([userId, sessionId])
}

model DeputySecretaryGeneral {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  @@unique([userId, sessionId])
}

model PresidentOfTheGeneralAssembly {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  @@unique([userId, sessionId])
}

model DeputyPresidentOfTheGeneralAssembly {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  @@unique([userId, sessionId])
}

model Organiser {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  @@unique([userId, sessionId])
}

model ConferenceDay {
  id              Int               @id @default(autoincrement())
  name            String?
  description     String?
  date            DateTime?
  location        Location?         @relation(fields: [locationId], references: [id])
  locationId      String?
  session         Session           @relation(fields: [sessionId], references: [id])
  sessionId       String
  DraftResolution DraftResolution[]
}

model WorkshopDay {
  id          Int       @id @default(autoincrement())
  name        String?
  description String?
  date        DateTime?
  location    Location? @relation(fields: [locationId], references: [id])
  locationId  String?
  session     Session   @relation(fields: [sessionId], references: [id])
  sessionId   String
}

model School {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  slug        String?          @unique
  joinYear    Int?
  location    Location?        @relation(fields: [locationId], references: [id])
  locationId  String?
  director    SchoolDirector[]
  student     Student[]
}

model Student {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String @unique
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  @@unique([userId, schoolId])
}

model SchoolDirector {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  school    School  @relation(fields: [schoolId], references: [id])
  schoolId  String
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  @@unique([userId, schoolId, sessionId])
}

model Committee {
  id                     String                   @id @unique @default(uuid())
  name                   String
  shortName              String?
  slug                   String?
  description            String?
  type                   CommitteeType
  topic1                 String?
  topic1description      String?
  topic2                 String?
  topic2description      String?
  topic3                 String?
  topic3description      String?
  session                Session                  @relation(fields: [sessionId], references: [id])
  sessionId              String
  delegate               Delegate[]
  chair                  Chair[]
  channel                Channel[]
  announcement           CommitteeAnnouncement[]
  SecurityCouncilCountry SecurityCouncilCountry[]
}

model Delegate {
  id              String            @id @default(uuid())
  country         String?
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  committee       Committee         @relation(fields: [committeeId], references: [id])
  committeeId     String
  DraftResolution DraftResolution[]

  @@unique([userId, committeeId])
}

model Chair {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  committee   Committee @relation(fields: [committeeId], references: [id])
  committeeId String

  @@unique([userId, committeeId])
}

model Department {
  id           String                   @id @default(uuid())
  name         String
  shortName    String?
  slug         String?
  description  String?
  type         DepartmentType?
  session      Session                  @relation(fields: [sessionId], references: [id])
  sessionId    String
  member       Member[]
  manager      Manager[]
  channel      Channel[]
  announcement DepartmentAnnouncement[]
}

model Member {
  id             Int        @id @default(autoincrement())
  jobDescription String?
  user           User       @relation(fields: [userId], references: [id])
  userId         String
  department     Department @relation(fields: [departmentId], references: [id])
  departmentId   String

  @@unique([userId, departmentId])
}

model Manager {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String

  @@unique([userId, departmentId])
}

model Location {
  id            String          @id @default(uuid())
  name          String
  slug          String?
  description   String?
  street        String?
  city          String?
  state         String?
  zipCode       String?
  country       String?
  phoneNumber   String?
  phoneCode     String?
  email         String?
  website       String?
  mapUrl        String?
  school        School[]
  conferenceDay ConferenceDay[]
  workshopDay   WorkshopDay[]
}

// CHAT GROUPS ///////////////////////////////////////////////////////////

model Chat {
  id        String        @id @default(uuid())
  name      String?
  message   Message[]
  member    ChatMemeber[]
  Session   Session?      @relation(fields: [sessionId], references: [id])
  sessionId String?
}

model ChatMemeber {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String
}

model GroupChat {
  id        String             @id @default(uuid())
  session   Session            @relation(fields: [sessionId], references: [id])
  sessionId String
  message   Message[]
  member    GroupChatMemeber[]
}

model GroupChatMemeber {
  id     Int       @id @default(autoincrement())
  user   User      @relation(fields: [userId], references: [id])
  userId String
  chat   GroupChat @relation(fields: [chatId], references: [id])
  chatId String
}

model Channel {
  id           String      @id @default(uuid())
  name         String
  description  String
  committee    Committee?  @relation(fields: [committeeId], references: [id])
  committeeId  String?
  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?
  message      Message[]
}

// MESSAGE ///////////////////////////////////////////////////////////

model Message {
  id          String     @id @default(uuid())
  //
  content     String
  time        DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  //
  chat        Chat?      @relation(fields: [chatId], references: [id])
  chatId      String?
  groupChat   GroupChat? @relation(fields: [groupChatId], references: [id])
  groupChatId String?
  replyTo     Message?   @relation("reply", fields: [replyToId], references: [id])
  replyToId   String?
  replies     Message[]  @relation("reply")
  //
  reaction    Reaction[]
  channel     Channel?   @relation(fields: [channelId], references: [id])
  channelId   String?
}

model Reaction {
  id        String       @id @default(uuid())
  //
  type      ReactionType
  //
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  //
  message   Message      @relation(fields: [messageId], references: [id])
  messageId String
}

// ANNOUNCEMENT ///////////////////////////////////////////////////////////

model GlobalAnnouncement {
  id          String              @id @default(uuid())
  isPinned    Boolean             @default(false)
  privacy     AnnouncementPrivacy @default(NORMAL)
  title       String
  description String?
  markdown    String?
  time        DateTime            @default(now())
  editTime    DateTime?           @default(now())
  user        User                @relation(fields: [userId], references: [id])
  userId      String
}

model MediBookAnnouncement {
  id          String              @id @default(uuid())
  isPinned    Boolean             @default(false)
  privacy     AnnouncementPrivacy @default(NORMAL)
  title       String
  description String?
  markdown    String?
  time        DateTime            @default(now())
  editTime    DateTime?           @default(now())
  user        User                @relation(fields: [userId], references: [id])
  userId      String
}

model WebsiteAnnouncement {
  id          String              @id @default(uuid())
  isPinned    Boolean             @default(false)
  privacy     AnnouncementPrivacy @default(NORMAL)
  title       String
  description String?
  markdown    String?
  time        DateTime            @default(now())
  editTime    DateTime?           @default(now())
  user        User                @relation(fields: [userId], references: [id])
  userId      String
}

model SessionAnnouncement {
  id          String              @id @default(uuid())
  isPinned    Boolean             @default(false)
  privacy     AnnouncementPrivacy @default(NORMAL)
  title       String
  description String?
  markdown    String?
  time        DateTime            @default(now())
  editTime    DateTime?           @default(now())
  user        User                @relation(fields: [userId], references: [id])
  userId      String
  //
  session     Session             @relation(fields: [sessionId], references: [id])
  sessionId   String
}

model DepartmentAnnouncement {
  id           String              @id @default(uuid())
  isPinned     Boolean             @default(false)
  privacy      AnnouncementPrivacy @default(NORMAL)
  title        String
  description  String?
  markdown     String?
  time         DateTime            @default(now())
  editTime     DateTime?           @default(now())
  user         User                @relation(fields: [userId], references: [id])
  userId       String
  //
  department   Department          @relation(fields: [departmentId], references: [id])
  departmentId String
}

model CommitteeAnnouncement {
  id          String              @id @default(uuid())
  isPinned    Boolean             @default(false)
  privacy     AnnouncementPrivacy @default(NORMAL)
  title       String
  description String?
  markdown    String?
  time        DateTime            @default(now())
  editTime    DateTime?           @default(now())
  user        User                @relation(fields: [userId], references: [id])
  userId      String
  //
  committee   Committee?          @relation(fields: [committeeId], references: [id])
  committeeId String?
  session     Session?            @relation(fields: [sessionId], references: [id])
  sessionId   String?
}

model ApplicantAnnouncement {
  id          String              @id @default(uuid())
  isPinned    Boolean             @default(false)
  privacy     AnnouncementPrivacy @default(NORMAL)
  title       String
  description String?
  markdown    String?
  time        DateTime            @default(now())
  editTime    DateTime?           @default(now())
  user        User                @relation(fields: [userId], references: [id])
  userId      String
}

model File {
  id          String   @id @default(uuid())
  name        String?
  description String?
  uuid        String
  time        DateTime @default(now())
}

model DraftResolution {
  id          String        @id @default(uuid())
  name        String?
  submitter   Delegate      @relation(fields: [submitterId], references: [id])
  submitterId String
  day         ConferenceDay @relation(fields: [dayId], references: [id])
  dayId       Int
}

// TERMS, CONDITIONS AND PRIVACY ///////////////////////////////////////////////////////////

model Term {
  id      Int    @id @default(autoincrement())
  index   Int    @default(0)
  title   String
  content String
}

model Privacy {
  id      Int    @id @default(autoincrement())
  index   Int    @default(0)
  title   String
  content String
}

// ENUMS ///////////////////////////////////////////////////////////

enum ReactionType {
  LOVE
  LAUGH
  SURPRISED
  SAD
  ANGRY
  LIKE
  DISLIKE
}

enum CommitteeType {
  GENERALASSEMBLY
  SECURITYCOUNCIL
  SPECIALCOMMITTEE
}

enum DepartmentType {
  IT
  MEDINEWS
  SALES
}

enum AnnouncementPrivacy {
  ANONYMOUS
  BOARD
  SECRETARIAT
  NORMAL
}
