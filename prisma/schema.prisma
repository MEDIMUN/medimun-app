datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model PendingUser {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  //
  email                   String   @unique
  official_name           String
  official_surname        String
  display_name            String
  display_surname         String
  password                String
  date_of_birth           String
  time_created            DateTime @default(now())
  role                    Int      @default(0)
  email_verification_code String
}

model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  //
  created_at       DateTime         @default(now())
  password         String           @map("pw")
  role             Int
  //
  email            String           @unique
  phone_number     String?
  //
  official_name    String
  official_surname String
  display_name     String?
  display_surname  String?
  //
  nationality      String?
  date_of_birth    DateTime         @map("dob")
  pronouns         String?
  //
  picture          String?
  //
  TeamMember       Member[]
  Delegate         Delegate[]
  SchoolMember     SchoolStudent[]
  SchoolDirector   SchoolDirector[]
  CommitteeChair   Chair[]
  TeamManager      Manager[]
  AssignedBy       Task[]           @relation("assigned_by")
  AssignedTo       Task[]           @relation("assigned_to")
}

model ConferenceSession {
  id                        String             @id @default(auto()) @map("_id") @db.ObjectId
  //
  isCurrent                 Boolean            @default(false)
  conference_session_number Int
  year                      Int
  theme                     String
  //
  Committee                 Committee[]
  Delegate                  Delegate[]
  Chair                     Chair[]
  TeamMember                Member[]
  TeamManager               Manager[]
  SchoolDirector            SchoolDirector[]
  SessionWorkshopDay        WorkshopDay[]
  ConferenceDay             ConferenceDay[]
  AnnouncementFor           AnnouncementInfo[]
  Task                      Task[]
}

model ConferenceDay {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  //
  name        String
  date        DateTime
  description String
  //
  location    Location          @relation(fields: [locationId], references: [id])
  locationId  String            @db.ObjectId
  //
  session     ConferenceSession @relation(fields: [sessionId], references: [id])
  sessionId   String
}

model WorkshopDay {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  //
  name        String
  date        DateTime
  description String
  //
  location    Location          @relation(fields: [locationId], references: [id])
  locationId  String            @db.ObjectId
  //
  session     ConferenceSession @relation(fields: [sessionId], references: [id])
  sessionId   String
}

model School {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  //
  name            String             @unique
  slug            String?            @unique
  join_year       Int?
  //
  Location        Location           @relation(fields: [locationId], references: [id])
  locationId      String             @db.ObjectId
  //
  SchoolMember    SchoolStudent[]
  SchoolDirector  SchoolDirector[]
  AnnouncementFor AnnouncementInfo[]
}

model SchoolStudent {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  //
  user      User   @relation(fields: [user_id], references: [id])
  user_id   String
  school    School @relation(fields: [school_id], references: [id])
  school_id String
}

model SchoolDirector {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  //
  user       User              @relation(fields: [user_id], references: [id])
  user_id    String
  school     School            @relation(fields: [school_id], references: [id])
  school_id  String
  session    ConferenceSession @relation(fields: [session_id], references: [id])
  session_id String
}

model Committee {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  //
  name            String             @unique
  slug            String             @unique
  description     String
  //
  session         ConferenceSession  @relation(fields: [session_id], references: [id])
  session_id      String             @db.ObjectId
  //
  delegate        Delegate[]
  chair           Chair[]
  AnnouncementFor AnnouncementInfo[]
}

model Delegate {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  country     String?
  //
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  committee   Committee         @relation(fields: [committeeId], references: [id])
  committeeId String
  session     ConferenceSession @relation(fields: [sessionId], references: [id])
  sessionId   String
}

model Chair {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  //
  user        User              @relation(fields: [userId], references: [id])
  userId      String            @db.ObjectId
  committee   Committee         @relation(fields: [committeeId], references: [id])
  committeeId String            @db.ObjectId
  session     ConferenceSession @relation(fields: [sessionId], references: [id])
  sessionId   String            @db.ObjectId
}

model Team {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  //
  name            String             @unique
  slug            String             @unique
  description     String?
  //
  team_member     Member[]
  TeamManager     Manager[]
  AnnouncementFor AnnouncementInfo[]
}

model Member {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  //
  job       String?
  //
  user      User              @relation(fields: [userId], references: [id])
  userId    String
  team      Team              @relation(fields: [teamId], references: [id])
  teamId    String
  session   ConferenceSession @relation(fields: [sessionId], references: [id])
  sessionId String
}

model Manager {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  //
  user      User              @relation(fields: [userId], references: [id])
  userId    String            @db.ObjectId
  team      Team              @relation(fields: [teamId], references: [id])
  teamId    String            @db.ObjectId
  session   ConferenceSession @relation(fields: [sessionId], references: [id])
  sessionId String            @db.ObjectId
}

model Location {
  id                   String          @id @default(auto()) @map("_id") @db.ObjectId
  //
  name                 String
  slug                 String?
  description          String?
  //
  street               String?
  city                 String?
  state                String?
  zip_code             String?
  country              String?
  //
  phone                String?
  email                String?
  website              String?
  //
  map_url              String?
  //
  School               School[]
  SessionConferenceDay ConferenceDay[]
  SessionWorkshopDay   WorkshopDay[]
}

model Task {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  //
  name           String
  description    String
  is_completed   Boolean           @default(false)
  //
  assigned_by    User              @relation("assigned_by", fields: [assigned_by_Id], references: [id])
  assigned_by_Id String            @db.ObjectId
  assigned_to    User              @relation("assigned_to", fields: [assigned_to_Id], references: [id])
  assigned_to_Id String            @db.ObjectId
  //
  session        ConferenceSession @relation(fields: [sessionId], references: [id])
  sessionId      String            @db.ObjectId
}

model Announcement {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  date            DateTime           @default(now())
  //
  title           String
  description     String?
  content         String
  AnnouncementFor AnnouncementInfo[]
}

model AnnouncementInfo {
  id                   String            @id @default(auto()) @map("_id") @db.ObjectId
  comment              String?
  //
  announcement         Announcement      @relation(fields: [announcementId], references: [id])
  announcementId       String            @db.ObjectId
  session              ConferenceSession @relation(fields: [sessionId], references: [id])
  sessionId            String            @db.ObjectId
  //
  isPinned             Boolean           @default(false)
  isEdited             Boolean           @default(false)
  //
  school               School?           @relation(fields: [schoolId], references: [id])
  schoolId             String?           @db.ObjectId
  committee            Committee?        @relation(fields: [committeeId], references: [id])
  committeeId          String?           @db.ObjectId
  team                 Team?             @relation(fields: [teamId], references: [id])
  teamId               String?           @db.ObjectId
  //
  isForDeleagtes       Boolean           @default(false)
  isForChairs          Boolean           @default(false)
  isForMembers         Boolean           @default(false)
  isForManagers        Boolean           @default(false)
  isForSchoolDirectors Boolean           @default(false)
  isForSchoolMembers   Boolean           @default(false)
  isForAlumni          Boolean           @default(false)
  isForUsers           Boolean           @default(false)
  isForGuests          Boolean           @default(false)
  isForAdmins          Boolean           @default(false)
  isForGlobalAdmins    Boolean           @default(false)
  isForEveryone        Boolean           @default(false)
  isForEnrolled        Boolean           @default(false)
}

model TermsAndConditions {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  text String
}
